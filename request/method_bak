
// PostForm method to content-type of x-www-form-urlencoded
func PostForm(api string, data url.Values, header map[string]string) (*http.Response, error) {
	path := base_url + api
	client := http.Client{}
	req, err := http.NewRequest("POST", path, strings.NewReader(data.Encode()))
	if err != nil {
		return nil, err
	}
	applyHeaders(req, DefaultContentType, header)
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// PostFile upload the file
// filePath is key of the file upload
func PostFile(api string, data url.Values, fieldName, filePath string, header map[string]string) (*http.Response, error) {
	path := base_url + api
	client := http.Client{}
	bodyBuf := &bytes.Buffer{}
	bodyWriter := multipart.NewWriter(bodyBuf)

	// open file
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("error opening file", err)
		return nil, err
	}
	defer file.Close()

	// set file name in the header
	fileName := filepath.Base(filePath)
	fileWriter, err := bodyWriter.CreateFormFile(fieldName, fileName)
	if err != nil {
		fmt.Println("error writing to buffer", err)
		return nil, err
	}

	// iocopy
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		fmt.Println("file copy error")
		return nil, err
	}

	for k, v := range data {
		err = bodyWriter.WriteField(k, v[0])
		if err != nil {
			fmt.Println("url.values field error")
			return nil, err
		}
	}

	contentType := bodyWriter.FormDataContentType()
	err = bodyWriter.Close()
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", path, bodyBuf)
	if err != nil {
		return nil, err
	}
	applyHeaders(req, contentType, header)
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	return resp, err
}

// PostJson a POST of Json
func PostJson(api string, jsonData interface{}, header map[string]string) (*http.Response, error) {
	path := base_url + api
	client := http.Client{}
	jsonBuf, _ := json.Marshal(jsonData)

	req, err := http.NewRequest("POST", path, bytes.NewBuffer(jsonBuf))
	if err != nil {
		return nil, err
	}
	applyHeaders(req, DefaultJSONType, header)

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	return resp, err
}
